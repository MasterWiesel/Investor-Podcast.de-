---
interface Props {
  placeholder?: string;
}

const { placeholder = "Suche nach Podcast-Folgen..." } = Astro.props;
---

<div class="search-container mb-8">
  <div class="relative">
    <input 
      type="text" 
      class="search-input w-full px-4 py-3 pl-12 rounded-lg border border-gray-300 focus:ring-2 focus:ring-[#5f0019] focus:border-transparent"
      placeholder={placeholder}
    >
    <svg 
      class="absolute left-4 top-1/2 -translate-y-1/2 w-5 h-5 text-gray-400" 
      viewBox="0 0 24 24" 
      fill="none" 
      stroke="currentColor"
    >
      <path 
        stroke-linecap="round" 
        stroke-linejoin="round" 
        stroke-width="2" 
        d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"
      />
    </svg>
  </div>
</div>

<script>
  class SearchHandler {
    constructor() {
      this.input = document.querySelector('.search-input');
      this.cards = document.querySelectorAll('[data-podcast-card]');
      this.noResults = document.querySelector('.no-results');
      
      this.input?.addEventListener('input', () => this.handleSearch());
    }

    handleSearch() {
      const searchTerm = this.input?.value.toLowerCase() || '';
      let hasResults = false;

      this.cards.forEach(card => {
        const title = card.getAttribute('data-title')?.toLowerCase() || '';
        const description = card.getAttribute('data-description')?.toLowerCase() || '';
        const shouldShow = title.includes(searchTerm) || description.includes(searchTerm);
        
        card.classList.toggle('hidden', !shouldShow);
        if (shouldShow) hasResults = true;
      });

      if (this.noResults) {
        this.noResults.classList.toggle('hidden', hasResults);
      }
    }
  }

  document.addEventListener('DOMContentLoaded', () => {
    new SearchHandler();
  });
</script>